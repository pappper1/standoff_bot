import asyncio
from loguru import logger


from aiogram import types
from aiogram.dispatcher import FSMContext

from loader import dp, db, bot
from keyboards.inline import ikb
from states import WithDraw, CashIn
from data.config import settings
from bot import start
from utils.other_utils import profile_caption


@dp.callback_query_handler(text="profile")
async def profile(call: types.CallbackQuery):
    await bot.edit_message_caption(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        caption=profile_caption(db, call),
        reply_markup=ikb.profile_ikb(),
    )


@dp.callback_query_handler(text="delete_game")
async def delete_game(call: types.CallbackQuery):
    if db.game_exists(call.from_user.id):
        if db.get_status(call.from_user.id) == 0:
            try:
                db.balance_plus(db.get_bet_amount(call.from_user.id), call.from_user.id)
                db.delete_game(call.from_user.id)
                await call.answer("‚úÖ –í–∞—à–∞ –∏–≥—Ä–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)

            except Exception as e:
                await call.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞!", show_alert=True)
                logger.error(e)

        else:
            await call.answer(
                "‚ùóÔ∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∏–≥—Ä—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–µ–π—á–∞—Å –Ω–∞—á–∞—Ç–∞!",
                show_alert=True,
            )

    else:
        await call.answer("‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä!", show_alert=True)


@dp.callback_query_handler(text="withdraw")
async def withdraw(call: types.CallbackQuery):
    await WithDraw.info.set()
    await bot.edit_message_caption(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        caption="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞: ",
        reply_markup=ikb.back_to_menu_ikb(),
    )


@dp.message_handler(state=WithDraw.info, content_types=["text"])
async def withdraw_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["withdraw_info"] = message.text

    await bot.send_message(message.from_user.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞: ")
    await WithDraw.next()


@dp.message_handler(state=WithDraw.amount, content_types=["text"])
async def withdraw_amount(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        info = data["withdraw_info"]
        try:
            data["withdraw_amount"] = int(message.text)
            amount = data["withdraw_amount"]
            if 0 > amount < 50:
                await bot.send_message(
                    message.from_user.id, "‚ùóÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - <b>50—Ä</b>"
                )
                await state.finish()
                await asyncio.sleep(2)
                await start(message)

            elif amount > db.get_user_balance(message.from_user.id):
                await bot.send_message(
                    message.from_user.id, f"‚ÄºÔ∏è –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!"
                )
                await state.finish()
                await asyncio.sleep(2)
                await start(message)

            else:
                await bot.send_message(
                    message.from_user.id,
                    f"üíµ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {amount} —Ä\n\nü™™ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {info}\n\nüî∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
                    reply_markup=ikb.withdraw_confirmation(),
                )
                await WithDraw.next()
        except:
            await bot.send_message(
                message.from_user.id, "üö´ –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!\n\n‚úèÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
            )


@dp.callback_query_handler(state=WithDraw.acceptation, text="accept_withdraw")
async def withdraw_accept(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        amount = data["withdraw_amount"]
        info = data["withdraw_info"]

    db.balance_minus_bet(amount, call.from_user.id)
    db.update_withdraws_count(amount)
    for item in db.all_user_information(call.from_user.id):
        await bot.send_message(
            settings.ADMIN,
            f"""üî∞ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!
        
üÜî ID: {item[1]}
üì± Username: @{item[2]}
‚è± –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {item[5]}
üéØ –ò–≥—Ä —Å—ã–≥—Ä–∞–ª: {item[4]}

ü™™ –ü–ª–∞—Ç—ë–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {info}

üíµ–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {amount} —Ä""",
        )

    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(
        call.from_user.id,
        "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n‚åõÔ∏è –í—ã–≤–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤",
    )
    await asyncio.sleep(2)
    await start(call)
    await state.finish()


@dp.callback_query_handler(state=WithDraw.acceptation, text="decline_withdraw")
async def withdraw_decline(call: types.CallbackQuery, state: FSMContext):
    await bot.send_message(call.from_user.id, "‚úÖ –í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω!")
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await state.finish()
    await asyncio.sleep(2)
    await start(call)


@dp.callback_query_handler(text="cash_in")
async def cash_in(call: types.CallbackQuery):
    await bot.edit_message_caption(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        caption="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=ikb.back_to_menu_ikb(),
    )
    await CashIn.amount.set()


@dp.message_handler(state=CashIn.amount, content_types=["text"])
async def cash_in_amount(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            data["cash_in_amount"] = int(message.text)
            amount = data["cash_in_amount"]
            await bot.send_message(
                message.from_user.id,
                f"üíµ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount} —Ä\n\nüî∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ: ",
                reply_markup=ikb.cash_in_confirmation(),
            )
            await CashIn.next()
        except:
            await bot.send_message(
                message.from_user.id, "üö´ –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!\n\n‚úèÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
            )


@dp.callback_query_handler(state=CashIn.confirmation, text="accept_cash_in")
async def accept_cash_in(call: types.CallbackQuery, state: FSMContext):
    amount = (await state.get_data())["cash_in_amount"]
    await bot.delete_message(call.from_user.id, call.message.message_id)
    for item in db.all_user_information(call.from_user.id):
        await bot.send_message(
            settings.ADMIN,
            f"""üî∞ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!
        
üÜî ID: {item[1]}
üì± Username: @{item[2]}
‚è± –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {item[5]}
üéØ –ò–≥—Ä —Å—ã–≥—Ä–∞–ª: {item[4]}

üíµ–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount} —Ä""",
        )
    await bot.send_message(
        call.from_user.id,
        "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\nüíà –û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
    )
    await state.finish()
    await asyncio.sleep(2)
    await start(call)


@dp.callback_query_handler(state=CashIn.confirmation, text="decline_cash_in")
async def decline_cash_in(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, "‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
    await asyncio.sleep(2)
    await start(call)


@dp.callback_query_handler(state=CashIn.amount, text="back_to_main_menu")
async def back_to_profile(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.edit_message_caption(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        caption=profile_caption(db, call),
        reply_markup=ikb.profile_ikb(),
    )


@dp.callback_query_handler(state=WithDraw.info, text="back_to_main_menu")
async def back_to_profile(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.edit_message_caption(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        caption=profile_caption(db, call),
        reply_markup=ikb.profile_ikb(),
    )