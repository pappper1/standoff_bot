from loader import dp, db, bot
from aiogram import types
import keyboards.inline as ikb
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from utils.other_utils import games_cb, arbitrage_cb
from media.texts.captions import find_games_message
from loguru import logger
import asyncio
from states import Arbitration
import data.config as cfg


@dp.callback_query_handler(text="find_match")
async def find_game(call: types.CallbackQuery):
    ikb = InlineKeyboardMarkup(row_width=1)

    for item in db.get_all_active_games():
        ikb.add(InlineKeyboardButton(f"üé≤ –°—Ç–∞–≤–∫–∞ {item[5]} —Ä", callback_data= games_cb.new(id= item[1], action = "view")))

    ikb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu"))
    
    await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=find_games_message, reply_markup=ikb)


@dp.callback_query_handler(games_cb.filter(action="view"))
async def game_info(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    match_id = callback_data['id']

    for item in db.get_game_information(match_id):
        await bot.edit_message_caption(chat_id=call.message.chat.id,
                                        message_id=call.message.message_id,
                                        caption= f'''üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ:
                                        
‚öí –°–æ–∑–¥–∞—Ç–µ–ª—å: {item[1]}
üé≤ –°—Ç–∞–≤–∫–∞: {item[5]} —Ä
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item[6]}''', reply_markup= ikb.game_ikb())
        
    await state.update_data(match_index = match_id)
        

@dp.callback_query_handler(text="back_to_matches")
async def back_to_matches(call: types.CallbackQuery):
    await find_game(call)


@dp.callback_query_handler(text="join")
async def join_match(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        match_id = data["match_index"]

    if db.get_user_status(call.from_user.id) == 1:
        await call.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–∞—Ç—á—É —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂!", show_alert= True)

    elif db.game_exists(call.from_user.id):
        await call.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–∞—Ç—á—É, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ–π!", show_alert= True)
    
    elif str(match_id) == str(call.from_user.id):
        await call.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π –∂–µ –∏–≥—Ä–µ!", show_alert= True)
    
    elif db.get_user_balance(call.from_user.id) >= db.get_bet_amount(match_id):
        try:
            db.balance_minus_bet(db.get_bet_amount(match_id), call.from_user.id)
            db.update_games_count()
            db.update_user_games_count(match_id)
            db.update_user_games_count(call.from_user.id)
            db.activate_game(match_id)
            db.add_joiner(call.from_user.id, call.from_user.username, match_id)
            db.add_game_results(match_id)

            ikb = InlineKeyboardMarkup(row_width=2)
            ikb.add(InlineKeyboardButton(f"üèÜ {match_id}", callback_data="creator"))
            ikb.add(InlineKeyboardButton(f"üèÜ {call.from_user.id}", callback_data="joiner"))

            
            for item in db.get_game_information(match_id):
                await bot.edit_message_caption(chat_id=call.message.chat.id,
                                            message_id=call.message.message_id,
                                            caption=f'''‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!
                
üîñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ:

üî∑ –í—ã: {item[3]}, @{item[4]}
üî∑ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {item[1]}, @{item[2]}

üé≤ –°—Ç–∞–≤–∫–∞: {item[5]} —Ä
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item[6]}

üí¨ –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! 
‚¨áÔ∏è –ù–∏–∂–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –º–∞—Ç—á–∞!
''', reply_markup= ikb)
                
                await bot.send_message(match_id, f'''‚úÖ –ö –≤–∞—à–µ–π –∏–≥—Ä–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è {call.from_user.id}!
                
üîñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ:

üî∑ –í—ã: {item[1]}, @{item[2]}
üî∑ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {item[3]}, @{item[4]}

üé≤ –°—Ç–∞–≤–∫–∞: {item[5]} —Ä
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item[6]}

üí¨ –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!
‚¨áÔ∏è –ù–∏–∂–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –º–∞—Ç—á–∞!
''', reply_markup= ikb)

            await state.update_data(match_index = match_id)

        except Exception as e:
            logger.exception(e)


@dp.callback_query_handler(text="creator")
async def winner_creator(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        match_id = data["match_index"]

    winner = call.data

    if str(call.from_user.id) == str(match_id):
        db.add_winner_1(winner, match_id)
  
        for item in db.get_results(match_id):
            if item[2] == "–í—ã–±–æ—Ä":
                await bot.send_message(call.from_user.id,  '‚ùáÔ∏è –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!\n‚åõÔ∏è –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–±–æ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞!')

            elif item[1] == item[2]:
                await bot.send_message(call.from_user.id, "ü•áüéó –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –º–∞—Ç—á–µ!")
                
                for user in db.get_game_information(match_id):
                    await bot.send_message(user[3], '‚õîÔ∏è –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ –º–∞—Ç—á–µ!')

                    db.balance_plus(user[5]*2-db.get_comission(), match_id)

                db.delete_game(match_id)
                db.delete_results(match_id)
                
            elif item[1] != item[2]:
                await bot.send_message(call.from_user.id, "üìõ –í—ã–±–æ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!\n\nüî∞ –°–æ–∑–¥–∞—é –∞—Ä–±–∏—Ç—Ä–∞–∂.....")
                await bot.send_message(db.get_joiner(match_id), "üìõ –í—ã–±–æ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!\n\nüî∞ –°–æ–∑–¥–∞—é –∞—Ä–±–∏—Ç—Ä–∞–∂.....\n\n‚ÄºÔ∏è –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–≥–¥–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")

                db.update_status_arbitrage(call.from_user.id)
                db.update_status_arbitrage(db.get_joiner(match_id))
                
                await asyncio.sleep(2)

                await Arbitration.proofs.set()

                await bot.send_message(call.from_user.id, '‚ö†Ô∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤—Å–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤–∞—à–µ–π –ø–æ–±–µ–¥—ã(—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ): ')   

                db.delete_results(match_id)
    
    else:
        db.add_winner_2(winner, match_id)
        
        for item in db.get_results(match_id):
            if item[1] == "–í—ã–±–æ—Ä":
                await bot.send_message(call.from_user.id, '‚ùáÔ∏è –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!\n‚åõÔ∏è –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–±–æ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞!')

            elif item[1] == item[2]:
                await bot.send_message(call.from_user.id,"‚õîÔ∏è –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ –º–∞—Ç—á–µ!")

                await bot.send_message(match_id, 'ü•áüéó –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –º–∞—Ç—á–µ!')
                
                for user in db.get_game_information(match_id):
                    db.balance_plus(user[5]*2-db.get_comission(), match_id)

                db.delete_game(match_id)
                db.delete_results(match_id)
                
            elif item[1] != item[2]:
                await bot.send_message(call.from_user.id, "üìõ –í—ã–±–æ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!\n\nüî∞ –°–æ–∑–¥–∞—é –∞—Ä–±–∏—Ç—Ä–∞–∂.....")
                await bot.send_message(match_id, "üìõ –í—ã–±–æ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!\n\nüî∞ –°–æ–∑–¥–∞—é –∞—Ä–±–∏—Ç—Ä–∞–∂.....\n\n‚ÄºÔ∏è –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–≥–¥–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")

                db.update_status_arbitrage(call.from_user.id)
                db.update_status_arbitrage(match_id)
                
                await asyncio.sleep(2)

                await Arbitration.proofs.set()

                await bot.send_message(call.from_user.id, '‚ö†Ô∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤—Å–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤–∞—à–µ–π –ø–æ–±–µ–¥—ã(—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ): ')

                db.delete_results(match_id)
            

@dp.callback_query_handler(text="joiner")
async def winner_joiner(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        match_id = data["match_index"]

    winner = call.data

    if str(call.from_user.id) == str(match_id):
        db.add_winner_1(winner, match_id)
  
        for item in db.get_results(match_id):
            if item[2] == "–í—ã–±–æ—Ä":
                await bot.send_message(call.from_user.id,  '‚ùáÔ∏è –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!\n‚åõÔ∏è –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–±–æ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞!')

            elif item[1] == item[2]:
                await bot.send_message(call.from_user.id, "‚õîÔ∏è –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ –º–∞—Ç—á–µ!")
                
                for user in db.get_game_information(match_id):
                    await bot.send_message(user[3], 'ü•áüéó –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –º–∞—Ç—á–µ!')

                    db.balance_plus(user[5]*2-db.get_comission(), user[3])

                db.delete_game(match_id)
                db.delete_results(match_id)
                
            elif item[1] != item[2]:
                await bot.send_message(call.from_user.id, "üìõ –í—ã–±–æ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!\n\nüî∞ –°–æ–∑–¥–∞—é –∞—Ä–±–∏—Ç—Ä–∞–∂.....")
                await bot.send_message(db.get_joiner(match_id), "üìõ –í—ã–±–æ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!\n\nüî∞ –°–æ–∑–¥–∞—é –∞—Ä–±–∏—Ç—Ä–∞–∂.....\n\n‚ÄºÔ∏è –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–≥–¥–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")

                db.update_status_arbitrage(call.from_user.id)
                db.update_status_arbitrage(db.get_joiner(match_id))
                
                await asyncio.sleep(2)

                await Arbitration.proofs.set()

                await bot.send_message(call.from_user.id, '‚ö†Ô∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤—Å–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤–∞—à–µ–π –ø–æ–±–µ–¥—ã(—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ): ') 

                db.delete_results(match_id)  
    
    else:
        db.add_winner_2(winner, match_id)
        
        for item in db.get_results(match_id):
            if item[1] == "–í—ã–±–æ—Ä":
                await bot.send_message(call.from_user.id, '‚ùáÔ∏è –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!\n‚åõÔ∏è –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–±–æ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞!')

            elif item[1] == item[2]:
                await bot.send_message(call.from_user.id,"ü•áüéó –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –º–∞—Ç—á–µ!")

                await bot.send_message(match_id, '‚õîÔ∏è –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ –º–∞—Ç—á–µ!')
                
                for user in db.get_game_information(match_id):
                    db.balance_plus(user[5]*2-db.get_comission(), user[3])

                db.delete_game(match_id)
                db.delete_results(match_id)
                
            elif item[1] != item[2]:
                await bot.send_message(call.from_user.id, "üìõ –í—ã–±–æ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!\n\nüî∞ –°–æ–∑–¥–∞—é –∞—Ä–±–∏—Ç—Ä–∞–∂.....")
                await bot.send_message(match_id, "üìõ –í—ã–±–æ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!\n\nüî∞ –°–æ–∑–¥–∞—é –∞—Ä–±–∏—Ç—Ä–∞–∂.....\n\n‚ÄºÔ∏è –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–≥–¥–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")

                db.update_status_arbitrage(call.from_user.id)
                db.update_status_arbitrage(match_id)
                
                await asyncio.sleep(2)

                await Arbitration.proofs.set()

                await bot.send_message(call.from_user.id, '‚ö†Ô∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤—Å–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤–∞—à–µ–π –ø–æ–±–µ–¥—ã(—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ): ')

                db.delete_results(match_id)



@dp.message_handler(state= Arbitration.proofs)
async def arbitrage_proofs(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        match_id = data["match_index"]
    
    ikb = InlineKeyboardMarkup(row_width=1)
    ikb.add(InlineKeyboardButton("‚ôªÔ∏è –°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", callback_data=arbitrage_cb.new(id= f"index_{match_id}", action = "end")))

    for item in db.get_game_information(match_id):
        await bot.send_message(cfg.ADMIN, f'''üî∞ –ù–æ–≤—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂!

1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫:
üÜî ID: {item[1]}
üì± Username: @{item[2]}

2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫:
üÜî ID: {item[3]}
üì± Username: @{item[4]}

üé≤ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {item[5]} —Ä

‚åõÔ∏è –û–∂–∏–¥–∞–π—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞!
 
    
‚¨áÔ∏è –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –µ—Å–ª–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂ –∑–∞–∫—Ä—ã—Ç''',
                                    reply_markup= ikb)
    
    await bot.forward_message(cfg.ADMIN, message.from_user.id, message.message_id)

    await bot.send_message(message.from_user.id, 'üì® –í–∞—à–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!')

    await state.finish()
        

@dp.callback_query_handler(arbitrage_cb.filter(action="end"))
async def end_arbitrage(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    match_id = int(str(callback_data["id"]).split("_")[1])

    db.update_status_free(match_id)
    db.update_status_free(db.get_joiner(match_id))

    await call.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!",show_alert=True)

    await bot.send_message(match_id, "‚ùáÔ∏è –° –≤–∞—Å —Å–Ω—è—Ç—ã –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è!")
    await bot.send_message(db.get_joiner(match_id), "‚ùáÔ∏è –° –≤–∞—Å —Å–Ω—è—Ç—ã –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è!")

    db.delete_game(match_id)
    
    await bot.delete_message(call.from_user.id, call.message.message_id)